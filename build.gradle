//프로젝트의 플러그인 의존성 관리 설정
buildscript {
    //build.gradle에서 사용하는 전역변수 설정
    ext{
        springBootVersion = '2.1.7.RELEASE'
    }
    // 각종 의존성 (라이브러리)들을 어떤 원격 저장소에서 받을 지 지정
    repositories{
        mavenCentral()
        //2022.02 부터 jcenter 서비스 종료
        // jcenter()
    }
    //spring-boot-gradle-plugin이라는 스프링 부트 그레이들 플러그인의 2.1.7.RELEASE를 의존성으로 받겠다는 의미
    dependencies{
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    //개선된 version
    id 'java'
    id 'eclipse'
    //Plugin [id: 'org.springframework.boot'] was not found in any of the following sources:
    //apply plugin 방식에서 plugins{} 방식으로 바뀌면서 id + version 형식으로 작성해야함
    //출처 https://doughman.tistory.com/19
    id 'org.springframework.boot' version '2.1.7.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}
/* 자바와 스프링 부트를 사용하기 위한 필수 플러그인 4개 책 version
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management' // 스프링 부트의 의존성들을 관리해주는 플러그인*/

//testImplementation으로 의존성을 관리하기 위해 java 플로그인 활성화
//출처 https://perfectacle.github.io/2022/03/13/gradle-java-test-fixtures-plugin/

group 'com.spring.first'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}
//프로젝트 개발에 필요한 의존성들을 선언
dependencies {
    /* compile('org.springframework.boot:spring-boot-starter-web') >> 6.x 이후 버전에서 compile이 deprecated 됨
    compile 대신 implememtation이나 api를 사용
    api는 compile과 같은 역할을 하는데, 모듈에서 api나 compile을 사용해 라이브러리를 가져오게 되면 해당 모듈을 의존하는 모듈에도 가져와진다.
     >> 모듈의 인터페이스만 외부에 노출되어야 하는데 라이브러리의 인터페이스까지 같이 노출됨. + 호출한 모듈에 호출된 모듈의 라이브러리가 중복으로 추가됨. (leak 발생)
     >> implementation을 사용해 가져오는 라이브러리는 해당 모듈을 의존하는 모듈에는 가져와지지 않으므로 implementation 사용 권장
     출처 https://kotlinworld.com/317 */
    //특정 버전 명시하면 안됨. 위의 전역변수로 선언한 springBootVersion의 버전을 반영해야 하기 때문
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation 'junit:junit:4.13.1'
    //testCompile('org.springframework.boot:spring-boot-starter-test') >> 마찬가지로 testImplementation으로 대체됨
    //테스트 시에만 적용되는 라이브러리 test dependencies
    //릴리즈를 위한 앱 번들에 테스트용 라이브러리, 디버그용 라이브러리들이 들어가면 앱 번들의 크기가 매우 커지기 때문에 범위 별로 라이브러리 넣게 하는 것
    // 출처 https://kotlinworld.com/316
    testImplementation ('org.springframework.boot:spring-boot-starter-test')
    // declaring test runtime dependencies
    testRuntimeOnly ('org.springframework.boot:spring-boot-starter-test')
    // lombock 5.x 이상부터 annotationProcessor 분리
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'
    // 스프링 부트용 spring data jpa 추상화 라이브러리. 부트 버전에 맞춰 자동으로 jpa 관련 라이브러리 버전 관리해줌.
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    // h2: 인메모리 관계형 데이터베이스. 별도의 설치 없이 프로젝트 의존성만으로 관리 가능.
    //   메모리에서 실행 >> 애플리케이션 재시작할때마다 초기화됨 >> 주로 테스트용도로 사용
    implementation('com.h2database:h2')
    // 머스타치 스타터 의존성
    implementation('org.springframework.boot:spring-boot-starter-mustache')

}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
test {
    useJUnitPlatform()
}